<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wenlwei</title>
  
  <subtitle>wenlweiの博客</subtitle>
  <link href="https://wenlwei.github.io/atom.xml" rel="self"/>
  
  <link href="https://wenlwei.github.io/"/>
  <updated>2022-02-07T10:54:21.258Z</updated>
  <id>https://wenlwei.github.io/</id>
  
  <author>
    <name>wenlwei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>first day-python</title>
    <link href="https://wenlwei.github.io/posts/84bf5555.html"/>
    <id>https://wenlwei.github.io/posts/84bf5555.html</id>
    <published>2022-02-06T13:29:03.000Z</published>
    <updated>2022-02-07T10:54:21.258Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="first-python"><a href="#first-python" class="headerlink" title="first python"></a>first python</h1><h2 id="pycharm调式工具"><a href="#pycharm调式工具" class="headerlink" title="pycharm调式工具"></a>pycharm调式工具</h2><h3 id="Step-Over"><a href="#Step-Over" class="headerlink" title="Step Over"></a>Step Over</h3><p>F8 可以单步执行代码 会把函数看成一段代码执行</p><h3 id="Step-Into"><a href="#Step-Into" class="headerlink" title="Step Into"></a>Step Into</h3><p>F7 可以单步执行代码 如果是函数会进入函数内部</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><pre class="line-numbers language-none"><code class="language-none"># 注释# 单行注释# print("hello world")'''多行注释多行注释多行注释print("hello")'''print("hello world")运行结果：hello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><pre class="line-numbers language-none"><code class="language-none">定义变量语法name = 'dhw'变量名 : name= : 赋值值 : dhw'''name = 'dhw'print(name)name = 'yzw'print(name)运行结果：dhwyzw<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># 变量命名规则'''1.易懂2.第一个字符不能是数字3.只能是字母，数字，下划线的组合4.不能与关键字重名# name = 'dhw'## age1 = 12## age_1=12'''<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="变量类型-python3-0"><a href="#变量类型-python3-0" class="headerlink" title="变量类型(python3.0)"></a>变量类型(python3.0)</h3><h3 id="数字型"><a href="#数字型" class="headerlink" title="数字型"></a>数字型</h3><p>整型：int</p><p>浮点型：float</p><p>布尔型：bool</p><p>​    真：True</p><p>​    假：false</p><p>复数型：complex</p><hr><h3 id="非数字型"><a href="#非数字型" class="headerlink" title="非数字型"></a>非数字型</h3><p>字符串</p><p>列表</p><p>元组</p><p>字典</p><hr><p>type函数可以查看变量类型    </p><pre class="line-numbers language-none"><code class="language-none">name = 'dhw'print(type(name))age = 18print(type(age))print(type(2 ** 32))运行结果：&lt;class 'str'&gt;&lt;class 'int'&gt;&lt;class 'int'&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="不同变量类型的计算"><a href="#不同变量类型的计算" class="headerlink" title="不同变量类型的计算"></a>不同变量类型的计算</h2><h3 id="数字型变量之间可以直接计算"><a href="#数字型变量之间可以直接计算" class="headerlink" title="数字型变量之间可以直接计算"></a>数字型变量之间可以直接计算</h3><p>True=1，false=0</p><pre class="line-numbers language-none"><code class="language-none">num1 = 10num2 = 1.2T = TrueB = Falseprint(num1 + num2)print(num1 + num2 + T)print(num1 + num2 + B)print(num1 * num2)print(num1 * num2 * T)print(num1 * num2 * B)运行结果：11.212.211.212.012.00.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串之间使用-拼接字符串"><a href="#字符串之间使用-拼接字符串" class="headerlink" title="字符串之间使用 + 拼接字符串"></a>字符串之间使用 + 拼接字符串</h3><pre class="line-numbers language-none"><code class="language-none">First_Name = '张'Last_Name = '三'print(First_Name + Last_Name)运行结果：张三<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串之间和整数使用-重复拼接字符串"><a href="#字符串之间和整数使用-重复拼接字符串" class="headerlink" title="字符串之间和整数使用 * 重复拼接字符串"></a>字符串之间和整数使用 * 重复拼接字符串</h3><pre class="line-numbers language-none"><code class="language-none">First_Name = '张'Last_Name = '三'print((First_Name + Last_Name) * 3)运行结果：张三张三张三<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注</strong>：字符串和数字型变量进行其他计算</p><hr><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><table><thead><tr><th align="center">转义字符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">\\</td><td align="center">反斜杠符号</td></tr><tr><td align="center">'</td><td align="center">单引号</td></tr><tr><td align="center">"</td><td align="center">双引号</td></tr><tr><td align="center">\n</td><td align="center">换行</td></tr><tr><td align="center">\t</td><td align="center">横向制表符（垂直方向按列对齐）</td></tr><tr><td align="center">\r</td><td align="center">回车</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">print('1\t2\t3\n10\t20\t30')print('1 \'2\' 3\n1 \"2\" 3')print('1 2 3')# 字符1被后回车字符代替print('1\r2 3')运行：1231020301 '2' 31 "2" 31 2 32 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><pre class="line-numbers language-none"><code class="language-none"># 算数运算符'''加 : +减 : -乘 : *除 : /取整除 : //取余 : %幂 ： **'''print(1+2)print(1-2)print(1*2)print(9/2)print(9//2)print(9%2)print(9**2)运行结果：3-124.54181<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">print(x)</td><td align="center">打印x结果</td></tr><tr><td align="center">input(x)</td><td align="center">键盘输入(输入的任何值python都认为是字符串)</td></tr><tr><td align="center">type(x)</td><td align="center">查看x变量类型</td></tr><tr><td align="center">int(x)</td><td align="center">将x转换为整数</td></tr><tr><td align="center">float(x)</td><td align="center">将x转换为浮点数</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">num = input('请输入：')print(num)print(type(num))num1 = input()print(num1)print(type(num1))运行结果：请输入：56465646&lt;class 'str'&gt;45644564&lt;class 'str'&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">num = '123'print(type(num))print(type(int(num)))num1 = '123.123'print(type(num1))print(type(float(num)))运行结果:&lt;class 'str'&gt;&lt;class 'int'&gt;&lt;class 'str'&gt;&lt;class 'float'&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>print</strong>函数会自动换行，在输出内容后加**end=””**不会换行</p><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><table><thead><tr><th align="center">格式化字符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">%s</td><td align="center">字符串</td></tr><tr><td align="center">%d</td><td align="center">有符号十进制整数，%06d表示输出的整数显示的位数，不足补0</td></tr><tr><td align="center">%f</td><td align="center">浮点数，%.02f表示小数点后只显示两位</td></tr><tr><td align="center">%%</td><td align="center">输出%</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none"># 定义一个字符串变量name，输出：我的名字叫小明，请多多关照name = '小明'print('我的名字叫 %s, 请多多关照' % name)# 输出我的学号是00000xstu_id = int(input())print('我的学号是 %06d' % stu_id)# 定义变量price,num,money,输出苹果单价price，购买了num，需支付，money,price = float(input())num = int(input())money = float(price * num)print('苹果单价 %.02f, 购买了 %d, 需支付 %.02f' % (price,num,money))# 定义一个小数scale，输出数据比例是xscale = float(input())print('数据比例是 %.02f%%' % scale)运行结果:我的名字叫 小明, 请多多关照4我的学号是 00000410.005苹果单价 10.00, 购买了 5, 需支付 50.0050.32数据比例是 50.32%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><pre class="line-numbers language-none"><code class="language-none">age = int(input())if age &gt;= 18:    print('可以进网吧')else: print('不能进网吧')运行结果:17不能进网吧<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">age = int(input())if age &gt;= 18:    print('可以进网吧')else: print('不能进网吧')运行结果:20可以进网吧<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">==</td><td align="center">判断两个操作数的值是否相等</td></tr><tr><td align="center">!=</td><td align="center">判断两个操作数的值是否不想等</td></tr><tr><td align="center">&gt;</td><td align="center">判断左操作数的值是否大于右操作数</td></tr><tr><td align="center">&lt;</td><td align="center">判断左操作数的值是否小于右操作数</td></tr><tr><td align="center">&gt;=</td><td align="center">判断左操作数的值是否大于等于右操作数</td></tr><tr><td align="center">&lt;=</td><td align="center">判断左操作数的值是否小于等于右操作数</td></tr></tbody></table><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><h4 id="python逻辑运算符"><a href="#python逻辑运算符" class="headerlink" title="python逻辑运算符"></a>python逻辑运算符</h4><h4 id="and-与"><a href="#and-与" class="headerlink" title="and/与"></a>and/与</h4><table><thead><tr><th align="center">条件1</th><th align="center">条件2</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">True</td><td align="center">True</td><td align="center">True</td></tr><tr><td align="center">True</td><td align="center">False</td><td align="center">False</td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center"></td></tr></tbody></table><hr><h4 id="or-或"><a href="#or-或" class="headerlink" title="or/或"></a>or/或</h4><table><thead><tr><th align="center">条件1</th><th align="center">条件2</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">True</td><td align="center">True</td><td align="center">True</td></tr><tr><td align="center">True</td><td align="center">False</td><td align="center">True</td></tr><tr><td align="center">False</td><td align="center">False</td><td align="center">False</td></tr></tbody></table><hr><h4 id="not-非"><a href="#not-非" class="headerlink" title="not/非"></a>not/非</h4><table><thead><tr><th align="center">条件</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">True</td><td align="center">False</td></tr><tr><td align="center">False</td><td align="center">True</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">age = int(input())if age &gt;=0 and age &lt;=100 :    print('满足要求')else : print('不满足')p_score = float(input())c_score = float(input())if p_score &gt;= 60 or c_score &gt;= 60 :    print('成绩及格')else : print('成绩不合格，请努力')运行结果:65满足要求5432成绩不合格，请努力<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">is_employee = Falseif not is_employee :    print('暗码错误，3s后自毁!!!')else : print('暗码正确，允许进入')运行结果：True暗码错误，3s后自毁!!!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="elif"><a href="#elif" class="headerlink" title="elif"></a>elif</h3><p>elifh和else都必须与if同时使用</p><pre class="line-numbers language-none"><code class="language-none">h_name = input()if h_name == '情人节' :    print('玫瑰 and 电影')elif h_name == '平安夜' :    print('苹果 and 吃大餐')elif h_name == '生日' :    print('蛋糕')else : print('有你的每一天都是节日')运行结果：生日蛋糕<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><p>工具包<strong>random</strong></p><p><strong>random.randint(a,b)</strong>,返回**[a,b]**之间的整数</p><hr><h1 id="应用——石头剪刀布"><a href="#应用——石头剪刀布" class="headerlink" title="应用——石头剪刀布"></a>应用——石头剪刀布</h1><pre class="line-numbers language-none"><code class="language-none">import randomprint('请出拳(石头，剪刀，布)：')player = input()print('玩家选择：%s' % player)computer = random.randint(1 , 3)if computer == 1 :    Computer = '石头'    print('AI选择：%s' % Computer)    if player == '布' :        print('玩家胜利，撒花')    elif player == '石头' :        print('平局，真的没有偷看吗')    else :        print('可惜，差一点就赢了')elif computer == 2 :    Computer = '剪刀'    print('AI选择：%s' % Computer)    if player == '石头' :        print('玩家胜利，撒花')    elif player == '剪刀' :        print('平局，真的没有偷看吗')    else :        print('可惜，差一点就赢了')else :    Computer = '布'    print('AI选择：%s' % Computer)    if player == '剪刀' :        print('玩家胜利，撒花')    elif player == '布' :        print('平局，真的没有偷看吗')    else :        print('可惜，差一点就赢了')        运行:请出拳(石头，剪刀，布)：剪刀玩家选择：剪刀AI选择：布玩家胜利，撒花<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="python" scheme="https://wenlwei.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>second day_python</title>
    <link href="https://wenlwei.github.io/posts/8d8e15c3.html"/>
    <id>https://wenlwei.github.io/posts/8d8e15c3.html</id>
    <published>2022-02-06T09:27:49.000Z</published>
    <updated>2022-02-15T08:56:47.122Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="second-day-python"><a href="#second-day-python" class="headerlink" title="second day_python"></a>second day_python</h1><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>while 条件(判断 计数器 是否达到 目标次数):</p><p>​    条件满足时，做到事1</p><p>​    条件满足时，做的事2</p><p>​    …</p><p>​    处理条件(计算球+1)</p><pre class="line-numbers language-none"><code class="language-none">i = 0while i &lt; 5 :    print('hello world')    i+=1print('i = %d' % i)运行:hello worldhello worldhello worldhello worldhello worldi = 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="0-100求和"><a href="#0-100求和" class="headerlink" title="0~100求和"></a>0~100求和</h4><pre class="line-numbers language-none"><code class="language-none">i = 0sum = 0while i &lt;= 100 :    sum += i    i+=1print('sum = %d' % sum)运行:5050<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="0-100偶数求和"><a href="#0-100偶数求和" class="headerlink" title="0~100偶数求和"></a>0~100偶数求和</h4><pre class="line-numbers language-none"><code class="language-none">i = 0sum = 0while i &lt;= 100 :    if i % 2 == 0 :        sum += i    i+=1print('sum = %d' % sum)运行:2550<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><p>满足某条件时，<strong>退出循环</strong></p><hr><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><p>满足某条件时，<strong>退出当前循环</strong>，开始下一次循环</p><hr><pre class="line-numbers language-none"><code class="language-none">i = 0sum = 0while i &lt;= 5 :    sum += i    if sum &gt;= 3 :        break    i+=1j = 0ans = 0while j&lt;=5 :    ans += j    if ans == 3:        continue    j+=1print('sum = %d,i = %d' % (sum,i))print('ans = %d,j = %d' % (ans,j))运行：sum = 3,i = 2ans = 17,j = 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h2><h3 id="打印小星星"><a href="#打印小星星" class="headerlink" title="打印小星星"></a>打印小星星</h3><pre class="line-numbers language-none"><code class="language-none">i = 1s_tr = '*'while i &lt;= 5 :    print(s_tr*i)    i+=1运行：***************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">i = 0j = 0while i &lt; 5 :    j = 0    while j &lt;= i :        print('*',end='')        j += 1    print('')    i += 1运行：***************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="打印九九乘法表"><a href="#打印九九乘法表" class="headerlink" title="打印九九乘法表"></a>打印九九乘法表</h3><pre class="line-numbers language-none"><code class="language-none">i = 1while i &lt;= 9 :    j = 1    while j &lt;= i :                # 打印每行        print('%d * %d = %d\t' % (j,i,i * j),end=' ')        j += 1    i += 1    print('')    运行：1 * 1 = 11 * 2 = 22 * 2 = 41 * 3 = 32 * 3 = 63 * 3 = 91 * 4 = 42 * 4 = 83 * 4 = 124 * 4 = 161 * 5 = 52 * 5 = 103 * 5 = 154 * 5 = 205 * 5 = 251 * 6 = 62 * 6 = 123 * 6 = 184 * 6 = 245 * 6 = 306 * 6 = 361 * 7 = 72 * 7 = 143 * 7 = 214 * 7 = 285 * 7 = 356 * 7 = 427 * 7 = 491 * 8 = 82 * 8 = 163 * 8 = 244 * 8 = 325 * 8 = 406 * 8 = 487 * 8 = 568 * 8 = 641 * 9 = 92 * 9 = 183 * 9 = 274 * 9 = 365 * 9 = 456 * 9 = 547 * 9 = 638 * 9 = 729 * 9 = 81<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>定义函数——**<em>封装**</em> 独立的功能</p><p>调用函数——享受**<em>封装**</em> 的成功</p><p>函数使得效率提高及代码的**<em>重用**</em></p><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>关键字**<em>def**</em></p><p>函数名命名规则：</p><p>​    字母，数字，下划线随意组合</p><p>​    不能以数字开头</p><p>​    不能以关键字命名</p><pre class="line-numbers language-none"><code class="language-none"># 只是封装不会主动执行def 函数名():封装代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><h4 id="创建一个新的python文件"><a href="#创建一个新的python文件" class="headerlink" title="创建一个新的python文件"></a>创建一个新的python文件</h4><p>导入工具包</p><p>关键字**<em>import**</em></p><p>使用函数</p><p>文件名.函数名</p><pre class="line-numbers language-none"><code class="language-none">import 文件名文件名.函数名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h4 id="或者在原文件上执行"><a href="#或者在原文件上执行" class="headerlink" title="或者在原文件上执行"></a>或者在原文件上执行</h4><pre class="line-numbers language-none"><code class="language-none">def 函数名():封装代码# 调用函数函数名()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="示例九九乘法表"><a href="#示例九九乘法表" class="headerlink" title="示例九九乘法表"></a>示例九九乘法表</h3><pre class="line-numbers language-none"><code class="language-none">def mul_tab():    i = 1    while i &lt;= 9:        j = 1        while j &lt;= i:            # 打印每行            print('%d * %d = %d\t' % (j, i, i * j), end=' ')            j += 1        i += 1        print('')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">import mul_tabmul_tab.mul_tab()运行：1 * 1 = 1 1 * 2 = 2 2 * 2 = 4 1 * 3 = 3 2 * 3 = 6 3 * 3 = 9 1 * 4 = 4 2 * 4 = 8 3 * 4 = 12 4 * 4 = 16 1 * 5 = 5 2 * 5 = 10 3 * 5 = 15 4 * 5 = 20 5 * 5 = 25 1 * 6 = 6 2 * 6 = 12 3 * 6 = 18 4 * 6 = 24 5 * 6 = 30 6 * 6 = 36 1 * 7 = 7 2 * 7 = 14 3 * 7 = 21 4 * 7 = 28 5 * 7 = 35 6 * 7 = 42 7 * 7 = 49 1 * 8 = 8 2 * 8 = 16 3 * 8 = 24 4 * 8 = 32 5 * 8 = 40 6 * 8 = 48 7 * 8 = 56 8 * 8 = 64 1 * 9 = 9 2 * 9 = 18 3 * 9 = 27 4 * 9 = 36 5 * 9 = 45 6 * 9 = 54 7 * 9 = 63 8 * 9 = 72 9 * 9 = 81 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="函数文档注释"><a href="#函数文档注释" class="headerlink" title="函数文档注释"></a>函数文档注释</h3><p>1.在开发中使用三对引号写在定义函数下方</p><p>2.在函数调用位置使用快捷键CTRL+Q可以查看函数的说明信息</p><p>3.注释与函数保持一定距离(习惯)</p><pre class="line-numbers language-none"><code class="language-none">def ...():'''注释'''封装代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><h4 id="有参函数与无参函数"><a href="#有参函数与无参函数" class="headerlink" title="有参函数与无参函数"></a>有参函数与无参函数</h4><pre class="line-numbers language-none"><code class="language-none">def sum_2_num(num1, num2):    '''两数求和'''    result = num1 + num2    print('%d + %d = %d' % (num1, num2, result))sum_2_num(10, 45)运行：10 + 45 = 55<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有参函数：灵活可以处理不同的值</p><p>无参函数：只能处理固定的值</p><hr><h4 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h4><p>形参：定义函数时小括号中的参数，用来接收参数</p><p>实参：调用函数时小括号中的参数，用来传递数据到函数内部</p><h4 id="返回值return"><a href="#返回值return" class="headerlink" title="返回值return"></a>返回值return</h4><p>函数执行完成之后给调用者返回一个结果</p><p>return之后的语句都不会执行</p><hr><h3 id="函数的嵌套调用"><a href="#函数的嵌套调用" class="headerlink" title="函数的嵌套调用"></a>函数的嵌套调用</h3><p>在函数中调用另一个函数</p><pre class="line-numbers language-none"><code class="language-none">def sum_2_num(num1, num2):    '''两数求和'''    result = num1 + num2    return resultdef mul_10():    '''嵌套调用sum_2_num()'''    result = sum_2_num(10, 20) * 10    return resultprint(mul_10())运行结果：300<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-none"><code class="language-none">def print_line(char, times):    print(char * times)def print_times(char, times, ans):    i = 0    while i &lt; ans :        print_line(char, times)        i += 1ch = input('请输入要打印的字符 :')times = int(input('请输入要打印的次数 :'))ans = int(input('请输入要打印的行数 :'))print_times(ch, times, ans)运行结果：请输入要打印的字符 :*请输入要打印的次数 :10请输入要打印的行数 :3******************************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="python" scheme="https://wenlwei.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="https://wenlwei.github.io/posts/e255a10a.html"/>
    <id>https://wenlwei.github.io/posts/e255a10a.html</id>
    <published>2021-12-25T05:29:23.000Z</published>
    <updated>2022-01-30T11:16:18.024Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><p>由若干节点（node）和连接这些节点的链路（link）组成</p><h2 id="互联网"><a href="#互联网" class="headerlink" title="互联网"></a>互联网</h2><p>全世界最大的，覆盖全球的计算机网络</p><h2 id="互连网"><a href="#互连网" class="headerlink" title="互连网"></a>互连网</h2><p>通过路由器把<strong>网络连接</strong>起来构成范围更大的网络</p><p><a href="https://imgtu.com/i/H96CB8"><img src="https://s4.ax1x.com/2022/01/30/H96CB8.jpg" alt="H96CB8.jpg"></a></p><p><strong>网络</strong>：将许多计算机连接在一起</p><h2 id="互联网标准"><a href="#互联网标准" class="headerlink" title="互联网标准"></a>互联网标准</h2><p>所有互联网标准都已RFC的形式在护粮网是发表</p><h3 id="互联网草案"><a href="#互联网草案" class="headerlink" title="互联网草案"></a>互联网草案</h3><p>六个月有效期，这个阶段还不是RFC为文档</p><h3 id="建议标准"><a href="#建议标准" class="headerlink" title="建议标准"></a>建议标准</h3><p>开始成为RFC文档</p><h3 id="互联网标准-1"><a href="#互联网标准-1" class="headerlink" title="互联网标准"></a>互联网标准</h3><p>达到正式标准后，每个标准被分配一个编号 STD***。一个标准可以和多个RFC文档关联</p><h2 id="RFC之间的关系"><a href="#RFC之间的关系" class="headerlink" title="RFC之间的关系"></a>RFC之间的关系</h2><p><a href="https://imgtu.com/i/H969nf"><img src="https://s4.ax1x.com/2022/01/30/H969nf.jpg" alt="H969nf.jpg"></a></p><h1 id="互联网组成"><a href="#互联网组成" class="headerlink" title="互联网组成"></a>互联网组成</h1><h2 id="边缘部分"><a href="#边缘部分" class="headerlink" title="边缘部分"></a>边缘部分</h2><p>边缘部分：由所有连接在互联网上的主机构成。用户直接使用</p><p>这些主机又被称为<strong>端系统</strong></p><h3 id="端系统之间的两种通信方式"><a href="#端系统之间的两种通信方式" class="headerlink" title="端系统之间的两种通信方式"></a>端系统之间的两种通信方式</h3><p>客户—服务器(c/s)</p><p>客户是请求方，服务器是提供方</p><p><a href="https://imgtu.com/i/H96PHS"><img src="https://s4.ax1x.com/2022/01/30/H96PHS.jpg" alt="H96PHS.jpg"></a></p><p>对等方式(p2p)</p><p>本质仍是C/S方式，只是每一个主机即既是服务器又是客户</p><p><a href="https://imgtu.com/i/H96SjP"><img src="https://s4.ax1x.com/2022/01/30/H96SjP.jpg" alt="H96SjP.jpg"></a></p><h2 id="核心部分"><a href="#核心部分" class="headerlink" title="核心部分"></a>核心部分</h2><p>由许多网络和把他们连接起来的路由器组成</p><p><a href="https://imgtu.com/i/HCN21U"><img src="https://s4.ax1x.com/2022/01/30/HCN21U.jpg" alt="HCN21U.jpg"></a></p><h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><p>输入和输出端口无直接连接</p><p>工作过程：<br>把收到的分组暂时放入缓存；查找转发表；寻找合适的端口转发</p><p><strong>注</strong>：主机是为<strong>用户</strong>进行信息处理，路由器是对分组进行<strong>存储转发</strong></p><h1 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h1><p>通过交换机将主机连接起来</p><p>特点：</p><p>1.建立连接，释放连接，即面向连接</p><p>2.独占链路资源</p><p>3.专用的通路</p><p>4.传输效率低</p><h1 id="存储转发"><a href="#存储转发" class="headerlink" title="存储转发"></a>存储转发</h1><p>存储转发分为报文交换和报文分组</p><p>报文交换：不管发送数据长度多少，都当作一个逻辑单元发送</p><p>分组交换：限制一次传输的最大长度，超出最大长度就分为多个报文分组发送</p><p>分组交换原理与优点：</p><p><a href="https://imgtu.com/i/H96FAg"><img src="https://s4.ax1x.com/2022/01/30/H96FAg.jpg" alt="H96FAg.jpg"></a></p><p><a href="https://imgtu.com/i/H96Ahj"><img src="https://s4.ax1x.com/2022/01/30/H96Ahj.jpg" alt="H96Ahj.jpg"></a></p><hr><h3 id="存储转发优点"><a href="#存储转发优点" class="headerlink" title="存储转发优点"></a>存储转发优点</h3><p>1.线路利用率高，提高系统效率</p><p>2.动态选择通过的最佳路径</p><p>3.可以对不同通信速率的线路进行速率转换，也可以对不同的数据代码格式进行变换</p><p>4.可以平滑通信量</p><hr><h1 id="计算机网络性能"><a href="#计算机网络性能" class="headerlink" title="计算机网络性能"></a>计算机网络性能</h1><h2 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h2><p>速率是<strong>最重要的</strong>性能指标，指数据的传送速率，也称数据率或比特率</p><p>单位：bit/s或kbit/s、Mbit/s、Gbit/s等</p><p><strong>k=10^3,M=10^6,G=10^9</strong></p><p>比特</p><p>1字节(B)=8 bit</p><p>15GB=15 * 2^30 * 8 bit</p><p>k=2^10,M=2^20,G=2^30,T=2^40</p><h2 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h2><p>本指信号具有的<strong>频带宽度</strong>，最高频率和最低频率的差（Hz），在<strong>计算机网络</strong>中表示某通道传送数据的能力，在单位时间内网络中的某信道所能通过的<strong>最高数据率</strong>，单位bit/s</p><h2 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h2><p>单位时间通过某个网络的数据量</p><p>受网络带宽或网络额定速率的限制</p><h2 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h2><p>指数据从网络一端到另一端的时间</p><p>也称延迟或迟延</p><p>总时延=发送时延+传播时延+处理时延+排队时延</p><h3 id="发送时延"><a href="#发送时延" class="headerlink" title="发送时延"></a>发送时延</h3><p>发送时延=数据帧长度(bit)/发送速率(bit/s)</p><h3 id="传播时延"><a href="#传播时延" class="headerlink" title="传播时延"></a>传播时延</h3><p>传播时延=信道长度(m)/传播速率(m/s)</p><h3 id="处理时延"><a href="#处理时延" class="headerlink" title="处理时延"></a>处理时延</h3><p>主机或路由器收到分组后，为处理数据所花费的时间</p><h3 id="排队时延"><a href="#排队时延" class="headerlink" title="排队时延"></a>排队时延</h3><p>在路由器中等待的时间</p><p><strong>排队时延长短通常取决于网络中当时的通信量</strong></p><p><strong>通信量非常大时，相当于排队时延无穷</strong></p><hr><p>注：对于高速网络链路，提高的是<strong>发送速率</strong>不是<strong>传播速率</strong></p><hr><h2 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h2><p>时延带宽积=传播时延*带宽</p><h2 id="往返时间RTT"><a href="#往返时间RTT" class="headerlink" title="往返时间RTT"></a>往返时间RTT</h2><p>从发送数据开始到接收方确认的总时间</p><h2 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h2><p>分为信道利用率和网络利用率</p><p><a href="https://imgtu.com/i/H96kNQ"><img src="https://s4.ax1x.com/2022/01/30/H96kNQ.jpg" alt="H96kNQ.jpg"></a></p><h2 id="丢包率"><a href="#丢包率" class="headerlink" title="丢包率"></a>丢包率</h2><p>丢包率=丢包数/已发分组总数</p><h1 id="计算机网络类别"><a href="#计算机网络类别" class="headerlink" title="计算机网络类别"></a>计算机网络类别</h1><p>按范围分：</p><p><a href="https://imgtu.com/i/H96Z3n"><img src="https://s4.ax1x.com/2022/01/30/H96Z3n.jpg" alt="H96Z3n.jpg"></a></p><p>按使用者分：</p><p>公用网，专用网</p><h1 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h1><p>对等实体：通信双方同时处于活动的元素</p><p>计算机网络体系结构是计算机网络的各层及其协议的集合</p><h2 id="TCP-IP参考模型"><a href="#TCP-IP参考模型" class="headerlink" title="TCP/IP参考模型"></a>TCP/IP参考模型</h2><p><a href="https://imgtu.com/i/HCN6hV"><img src="https://s4.ax1x.com/2022/01/30/HCN6hV.jpg" alt="HCN6hV.jpg"></a></p><h2 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h2><p><a href="https://imgtu.com/i/H96V9s"><img src="https://s4.ax1x.com/2022/01/30/H96V9s.jpg" alt="H96V9s.jpg"></a></p><h2 id="五种协议的网络参考模型"><a href="#五种协议的网络参考模型" class="headerlink" title="五种协议的网络参考模型"></a>五种协议的网络参考模型</h2><p><a href="https://imgtu.com/i/H96ecq"><img src="https://s4.ax1x.com/2022/01/30/H96ecq.jpg" alt="H96ecq.jpg"></a></p><p>功能</p><p><a href="https://imgtu.com/i/H96mj0"><img src="https://s4.ax1x.com/2022/01/30/H96mj0.jpg" alt="H96mj0.jpg"></a></p><p><a href="https://imgtu.com/i/H96uuV"><img src="https://s4.ax1x.com/2022/01/30/H96uuV.jpg" alt="H96uuV.jpg"></a></p><p><a href="https://imgtu.com/i/HCNgpT"><img src="https://s4.ax1x.com/2022/01/30/HCNgpT.jpg" alt="HCNgpT.jpg"></a></p><p><a href="https://imgtu.com/i/H96KBT"><img src="https://s4.ax1x.com/2022/01/30/H96KBT.jpg" alt="H96KBT.jpg"></a></p><p><a href="https://imgtu.com/i/HCNoA1"><img src="https://s4.ax1x.com/2022/01/30/HCNoA1.jpg" alt="HCNoA1.jpg"></a></p><p><a href="https://imgtu.com/i/HCN57R"><img src="https://s4.ax1x.com/2022/01/30/HCN57R.jpg" alt="HCN57R.jpg"></a></p><h2 id="TCP-IP与OSI比较"><a href="#TCP-IP与OSI比较" class="headerlink" title="TCP/IP与OSI比较"></a>TCP/IP与OSI比较</h2><p><a href="https://imgtu.com/i/HCNhnJ"><img src="https://s4.ax1x.com/2022/01/30/HCNhnJ.jpg" alt="HCNhnJ.jpg"></a></p><h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><p>物理层作用：尽可能屏蔽掉不同传输媒体和通信手段差异，确定与传输媒体的接口特性</p><p>物理层主要任务：</p><p><a href="https://imgtu.com/i/HCN4B9"><img src="https://s4.ax1x.com/2022/01/30/HCN4B9.jpg" alt="HCN4B9.jpg"></a></p><p>模拟信号：<strong>连续</strong>的信号</p><p>数字信号：<strong>离散</strong>的信号</p><p>基带信号：即基本频带信号，来自信源的信号</p><p>信号为什么要调制：基带信号包含较多的低频成分，甚至有直流成分，许多信号不能传输</p><p>调制方式：基带调制，带通调制</p><p>编码方式：不归零制，归零制，曼切斯特，差分曼切斯特</p><hr><p><strong>数据</strong>：运送消息的实体</p><p><strong>信号</strong>：数据电气的或电磁的表现</p><p><strong>模拟信号</strong>：代表消息的参数的取值是连续的</p><p><strong>数学信号</strong>：代表消息的参数的取值是离散的</p><p><strong>码元</strong>：代表不同离散值的基本波形</p><p><strong>注</strong>：二进制编码时，只有两种不同的码元，0，1</p><h2 id="信道"><a href="#信道" class="headerlink" title="信道"></a>信道</h2><p><strong>单向信道</strong>：只能有一个方向的通信没有反方向</p><p><strong>双向交替通信</strong>：双方都可以发送信息，但<strong>不能同时</strong>发送</p><p><strong>双向同时通信</strong>：双方可以<strong>同时</strong>发送和接收</p><p><strong>基带调制</strong>：仅变换基带信号的波形，变换后仍是基带信号</p><p><strong>带通调制</strong>：使用载波进行调制，并转换为<strong>模拟信号</strong></p><h3 id="基本的带通调制方法"><a href="#基本的带通调制方法" class="headerlink" title="基本的带通调制方法"></a>基本的带通调制方法</h3><p>二元制调制：<br>调幅（AM）：载波的振幅</p><p>调频（FM）：载波的频率</p><p>调相（PM）：载波的初始相位</p><hr><p>奈氏准则：码元传输的最高速率为20000（码元/秒）</p><p>信噪比：信号的平均功率和噪声的平均功率之比，S/N，分贝（dB）作为度量单位</p><p>dB=10lg(S/N) （dB）</p><p>香农公式信道的极限信息传输速率<strong>C=Wlog2(1+S/N)</strong> (bit/s)</p><p>W为信道带宽</p><p><strong>注</strong>：</p><p>奈氏准则：理想条件下，码元极限传输速率</p><p>香农定理：噪声，干扰条件下，信息极限传输速率</p><h2 id="导引型传输媒体"><a href="#导引型传输媒体" class="headerlink" title="导引型传输媒体"></a>导引型传输媒体</h2><h3 id="双绞线"><a href="#双绞线" class="headerlink" title="双绞线"></a>双绞线</h3><p><a href="https://imgtu.com/i/HCNWX4"><img src="https://s4.ax1x.com/2022/01/30/HCNWX4.jpg" alt="HCNWX4.jpg"></a></p><p>剥线——理线——插线——压线</p><h3 id="同轴电缆"><a href="#同轴电缆" class="headerlink" title="同轴电缆"></a>同轴电缆</h3><p>具有很好的抗干扰特性，被广泛用于传输较高的速率</p><h3 id="光缆"><a href="#光缆" class="headerlink" title="光缆"></a>光缆</h3><p>多模光纤：可以存在多条不同角度入射的光线，适用近距离传输</p><p>单模光纤：不会产生多次反射</p><p>光纤通信常用三个波段中心：850nm，1300nm，1550nm</p><h2 id="非导引型传输媒体"><a href="#非导引型传输媒体" class="headerlink" title="非导引型传输媒体"></a>非导引型传输媒体</h2><p>短波通信：主要靠电离层的反射，质量差，速率低</p><p>微波：主要是直线传播</p><h2 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h2><p><a href="https://imgtu.com/i/HCNTtx"><img src="https://s4.ax1x.com/2022/01/30/HCNTtx.jpg" alt="HCNTtx.jpg"></a></p><h3 id="频分服用-FDM"><a href="#频分服用-FDM" class="headerlink" title="频分服用 FDM"></a>频分服用 FDM</h3><p>同样的时间占用不同的带宽资源</p><p>各子信道之间设立隔离带，各路信号互不干扰</p><p>总频率宽度大于各个子信道频率之和</p><p>特点：以并行的方式工作</p><p>充分利用带宽，效率较高</p><p>若每一个用户占用的带宽不变，当复用的用户数据增加时，信道总宽度也变宽</p><p>更多的用户轮流适用这n个频带，称为频分多址接入FDMA，简称频分多址</p><h3 id="时分复用TDM"><a href="#时分复用TDM" class="headerlink" title="时分复用TDM"></a>时分复用TDM</h3><p><a href="https://imgtu.com/i/HCN7h6"><img src="https://s4.ax1x.com/2022/01/30/HCN7h6.jpg" alt="HCN7h6.jpg"></a></p><h3 id="统计时分复用STDM"><a href="#统计时分复用STDM" class="headerlink" title="统计时分复用STDM"></a>统计时分复用STDM</h3><p><a href="https://imgtu.com/i/HCNb9K"><img src="https://s4.ax1x.com/2022/01/30/HCNb9K.jpg" alt="HCNb9K.jpg"></a></p><h3 id="波分复用WDM"><a href="#波分复用WDM" class="headerlink" title="波分复用WDM"></a>波分复用WDM</h3><p><a href="https://imgtu.com/i/HCNq1O"><img src="https://s4.ax1x.com/2022/01/30/HCNq1O.jpg" alt="HCNq1O.jpg"></a></p><h3 id="码分复用CDM"><a href="#码分复用CDM" class="headerlink" title="码分复用CDM"></a>码分复用CDM</h3><p><a href="https://imgtu.com/i/HCNLcD"><img src="https://s4.ax1x.com/2022/01/30/HCNLcD.jpg" alt="HCNLcD.jpg"></a></p><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><p><strong>点对点信道</strong>：一对一的点对点通信方式</p><p><strong>广播信道</strong>：一对多广播通信</p><h2 id="数据链路和桢"><a href="#数据链路和桢" class="headerlink" title="数据链路和桢"></a>数据链路和桢</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="计算机网络" scheme="https://wenlwei.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>日撸Java2</title>
    <link href="https://wenlwei.github.io/posts/97a699da.html"/>
    <id>https://wenlwei.github.io/posts/97a699da.html</id>
    <published>2021-12-20T15:28:48.000Z</published>
    <updated>2022-01-29T10:46:53.396Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="线性数据结构"><a href="#线性数据结构" class="headerlink" title="线性数据结构"></a>线性数据结构</h1><h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><p>1 创建一个空表</p><p>2 给空表赋值</p><p>3 将表中的值赋给字符串</p><p>4 清空表中元素</p><p>5 查找给定元素所处的位置. 找不到就返回 -1.<br>6 在给定位置增加元素. 如果顺序表已满, 或位置不在已有位置范围之内, 就拒绝增加.<br>7 删除指定位置的元素. 要处理给定位置不合法的情况. 该位置必须是已经有数据的.</p><pre class="line-numbers language-none"><code class="language-none">/** * Sequential list. *  * @author Lenovo. */public class SequentialList {/** * The maximal length of the list. It is a constant. */public static final int MAX_LENGTH = 10;/** * The actual length not exceeding MAX_LENGTH. Attention: length is not only * the member variable of Sequential list, but also the member variable of * Array. In fact, a name can be the member variable of different classes. */int length;/** * The data stored in an array. */int[] data;/** ********************* * Construct an empty sequential list. ********************* */public SequentialList() {length = 0;data = new int[MAX_LENGTH];}// Of the first constructor/** ********************* * Construct a sequential list using an array. *  * @param paraArray *            The given array. Its length should not exceed MAX_LENGTH. For *            simplicity now we do not check it. ********************* */public SequentialList(int[] paraArray) {data = new int[MAX_LENGTH];length = paraArray.length;// Copy data.for (int i = 0; i &lt; paraArray.length; i++) {data[i] = paraArray[i];} // Of for i}// Of the second constructor/** ********************* * Overrides the method claimed in Object, the superclass of any class. ********************* */public String toString() {String resultString = "";if (length == 0) {return "empty";} // Of iffor (int i = 0; i &lt; length - 1; i++) {resultString += data[i] + ", ";} // Of for iresultString += data[length - 1];return resultString;}// Of toString/** ********************* * Reset to empty. ********************* */public void reset() {length = 0;}// Of reset/** ********************* * The entrance of the program. *  * @param args *            Not used now. ********************* *//**    *********************    * Find the index of the given value. If it appears in multiple positions,    * simply return the first one.    *     * @param paraValue The given value.    * @return The position. -1 for not found.    *********************    */   public int indexOf(int paraValue) {   int tempPosition = -1;   for (int i = 0; i &lt; length; i++) {   if (data[i] == paraValue) {   tempPosition = i;   break;   } // Of if   } // Of for i   return tempPosition;   }// Of indexOf   /**    *********************    * Insert a value to a position. If the list is already full, do nothing.    *     * @param paraPosition The given position.    * @param paraValue    The given value.    * @return Success or not.    *********************    */   public boolean insert(int paraPosition, int paraValue) {   if (length == MAX_LENGTH) {   System.out.println("List full.");   return false;   } // Of if   if ((paraPosition &lt; 0) || (paraPosition &gt; length)) {   System.out.println("The position " + paraPosition + " is out of bounds.");   return false;   } // Of if   // From tail to head. The last one is moved to a new position. Because length &lt; MAX_LENGTH, no exceeding occurs.   for (int i = length; i &gt; paraPosition; i--) {   data[i] = data[i - 1];   } // Of for i   data[paraPosition] = paraValue;   length++;   return true;   }// Of insert   /**    *********************    * Delete a value at a position.    *     * @param paraPosition The given position.    * @return Success or not.    *********************    */   public boolean delete(int paraPosition) {   if ((paraPosition &lt; 0) || (paraPosition &gt;= length)) {   System.out.println("The position " + paraPosition + " is out of bounds.");   return false;   } // Of if   // From head to tail.   for (int i = paraPosition; i &lt; length - 1; i++) {   data[i] = data[i + 1];   } // Of for i   length--;   return true;   }// Of delete   /**    *********************    * The entrance of the program.    *     * @param args Not used now.    *********************    */   public static void main(String args[]) {   int[] tempArray = { 1, 4, 6, 9 };   SequentialList tempFirstList = new SequentialList(tempArray);   System.out.println("After initialization, the list is: " + tempFirstList.toString());   System.out.println("Again, the list is: " + tempFirstList);   int tempValue = 4;   int tempPosition = tempFirstList.indexOf(tempValue);   System.out.println("The position of " + tempValue + " is " + tempPosition);   tempValue = 5;   tempPosition = tempFirstList.indexOf(tempValue);   System.out.println("The position of " + tempValue + " is " + tempPosition);   tempPosition = 2;   tempValue = 5;   tempFirstList.insert(tempPosition, tempValue);   System.out.println(   "After inserting " + tempValue + " to position " + tempPosition + ", the list is: " + tempFirstList);   tempPosition = 8;   tempValue = 10;   tempFirstList.insert(tempPosition, tempValue);   System.out.println(   "After inserting " + tempValue + " to position " + tempPosition + ", the list is: " + tempFirstList);   tempPosition = 3;   tempFirstList.delete(tempPosition);   System.out.println("After deleting data at position " + tempPosition + ", the list is: " + tempFirstList);   for (int i = 0; i &lt; 8; i++) {   tempFirstList.insert(i, i);   System.out.println("After inserting " + i + " to position " + i + ", the list is: " + tempFirstList);   } // Of for i   tempFirstList.reset();   System.out.println("After reset, the list is: " + tempFirstList);   }// Of main   }// Of class SequentialList<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="java" scheme="https://wenlwei.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>日撸Java 1</title>
    <link href="https://wenlwei.github.io/posts/9db90237.html"/>
    <id>https://wenlwei.github.io/posts/9db90237.html</id>
    <published>2021-12-17T14:30:58.000Z</published>
    <updated>2022-01-29T10:46:53.396Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java第一天"><a href="#Java第一天" class="headerlink" title="Java第一天"></a>Java第一天</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><pre class="line-numbers language-none"><code class="language-none">package base;/** * This is the first code. * @author Lenovo * */public class HelloWorld {public static void main(String args[]) {System.out.println("Hello, world");}//of main}//of class HelloWorld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="基本算术操作"><a href="#基本算术操作" class="headerlink" title="基本算术操作"></a>基本算术操作</h2><p>加、减、乘、除、整除、取余.  </p><p>熟悉 println 的中阶用法. </p><pre class="line-numbers language-none"><code class="language-none">package base;/** * This is the second code. * @author Lenovo * */public class BasicOperations {public static void main(String args[]) {int tempFirstInt,tempSecondInt,tempResultInt;double tempFirstDouble,tempSecondDouble,tempResultDouble;tempFirstInt=15;tempSecondInt=4;tempFirstDouble=1.2;tempSecondDouble=3.5;//AdditiontempResultInt=tempFirstInt+tempSecondInt;tempResultDouble=tempFirstDouble+tempSecondDouble;System.out.println(""+tempFirstInt+" + "+tempSecondInt+" + "+tempResultInt);System.out.println(""+tempFirstInt+" + "+tempSecondDouble+" + "+tempResultDouble);//SubtractiontempResultInt = tempFirstInt - tempSecondInt;tempResultDouble = tempFirstDouble - tempSecondDouble;System.out.println("" + tempFirstInt + " - " + tempSecondInt + " = " + tempResultInt);System.out.println("" + tempFirstDouble + " - " + tempSecondDouble + " = " + tempResultDouble);//MultiplicationtempResultInt = tempFirstInt * tempSecondInt;tempResultDouble = tempFirstDouble * tempSecondDouble;System.out.println("" + tempFirstInt + " * " + tempSecondInt + " = " + tempResultInt);System.out.println("" + tempFirstDouble + " * " + tempSecondDouble + " = " + tempResultDouble);//DivisiontempResultInt = tempFirstInt / tempSecondInt;tempResultDouble = tempFirstDouble / tempSecondDouble;System.out.println("" + tempFirstInt + " / " + tempSecondInt + " = " + tempResultInt);System.out.println("" + tempFirstDouble + " / " + tempSecondDouble + " = " + tempResultDouble);//ModulustempResultInt = tempFirstInt % tempSecondInt;System.out.println("" + tempFirstInt + " % " + tempSecondInt + " = " + tempResultInt);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="基本if语句"><a href="#基本if语句" class="headerlink" title="基本if语句"></a>基本if语句</h2><p>if then else.  </p><p>方法调用: 增加代码的复用性.  </p><p>方法头部规范的注释, 是后期生成文档的基础. </p><pre class="line-numbers language-none"><code class="language-none">package base;/** * The usage of the if statement * @author Lenovo * */public class IfStatement {/** ********************* * The entrance of the program. *  * @param args Not used now. ********************* */public static void main(String args[]) {int tempNumber1,tempNumber2;//Try a positive valuetempNumber1=5;if(tempNumber1&gt;=0) {tempNumber2=tempNumber1;}else {tempNumber2=-tempNumber1;}//of ifSystem.out.println("The absolute value of " + tempNumber1 + " is " + tempNumber2);// Try a negative value// Lines 27 through 33 are the same as Lines 15 through 19tempNumber1 = -3;if (tempNumber1 &gt;= 0) {tempNumber2 = tempNumber1;} else {tempNumber2 = -tempNumber1;} // Of ifSystem.out.println("The absolute value of " + tempNumber1 + " is " + tempNumber2);// Now we use a method/function for this purpose.tempNumber1 = 6;System.out.println("The absolute value of " + tempNumber1 + " is " + abs(tempNumber1));tempNumber1 = -8;System.out.println("The absolute value of " + tempNumber1 + " is " + abs(tempNumber1));}// Of main/** ********************* * The absolute value of the given parameter. *  * @param paraValue The given value. ********************* */public static int abs(int paraValue) {if (paraValue &gt;= 0) {return paraValue;} else {return -paraValue;} // Of if}// Of abs}// Of class IfStatement// Math function library Math.abs() function<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="闰年判断"><a href="#闰年判断" class="headerlink" title="闰年判断"></a>闰年判断</h2><p>能被4整除不能被100整除或者能被400整除</p><pre class="line-numbers language-none"><code class="language-none">package base;/** * The complex usage of the if statement. *  * @author Lenovo */public class LeapYear {/** ********************* * The entrance of the program. *  * @param args Not used now. ********************* */public static void main(String args[]) {// Test isLeapYearint tempYear = 2021;System.out.print("" + tempYear + " is ");if (!isLeapYear(tempYear)) {System.out.print("NOT ");} // Of ifSystem.out.println("a leap year.");tempYear = 2000;System.out.print("" + tempYear + " is ");if (!isLeapYear(tempYear)) {System.out.print("NOT ");} // Of ifSystem.out.println("a leap year.");tempYear = 2100;System.out.print("" + tempYear + " is ");if (!isLeapYear(tempYear)) {System.out.print("NOT ");} // Of ifSystem.out.println("a leap year.");tempYear = 2004;System.out.print("" + tempYear + " is ");if (!isLeapYear(tempYear)) {System.out.print("NOT ");} // Of ifSystem.out.println("a leap year.");// Test isLeapYearV2System.out.println("Now use the second version.");tempYear = 2021;System.out.print("" + tempYear + " is ");if (!isLeapYearV2(tempYear)) {System.out.print("NOT ");} // Of ifSystem.out.println("a leap year.");tempYear = 2000;System.out.print("" + tempYear + " is ");if (!isLeapYearV2(tempYear)) {System.out.print("NOT ");} // Of ifSystem.out.println("a leap year.");tempYear = 2100;System.out.print("" + tempYear + " is ");if (!isLeapYearV2(tempYear)) {System.out.print("NOT ");} // Of ifSystem.out.println("a leap year.");tempYear = 2004;System.out.print("" + tempYear + " is ");if (!isLeapYearV2(tempYear)) {System.out.print("NOT ");} // Of ifSystem.out.println("a leap year.");}// Of main/** ********************* * Is the given year leap *  * @param Lenovo ********************* */public static boolean isLeapYear(int paraYear) {if ((paraYear % 4 == 0) &amp;&amp; (paraYear % 100 != 0) || (paraYear % 400 == 0)) {return true;} else {return false;} // Of if}// Of isLeapYear/** ********************* * * @param Lenovo ********************* */public static boolean isLeapYearV2(int paraYear) {if (paraYear % 4 != 0) {return false;} else if (paraYear % 400 == 0) {return true;} else if (paraYear % 100 == 0) {return false;} else {return true;} // Of if}// Of isLeapYearV2}// Of class LeapYea<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="Java第二天"><a href="#Java第二天" class="headerlink" title="Java第二天"></a>Java第二天</h1><h2 id="矩阵元素相加"><a href="#矩阵元素相加" class="headerlink" title="矩阵元素相加"></a>矩阵元素相加</h2><pre class="line-numbers language--" data-language="-"><code class="language--">import java.util.Arrays;/** * This is second day. *  * @author Lenovo. */public class MatrixAddition{/** *  * @param args not used now. */public static void main(String args[]) {matrixElementSumTest();matrixAdditionTest();}//of main/** ********************* * Sum the element of a matrix. *  * @param parMatrix The given matrix. * @return The sum of all its elements. ********************* */public static int matrixElementSum(int[][] paraMatrix) {int resultSum = 0;for (int i = 0; i &lt; paraMatrix.length; i++) {for(int j = 0; j &lt; paraMatrix[0].length; j++) {resultSum += paraMatrix[i][j];} // of for j} // of for ireturn resultSum;}/** ********************* *Unit test for respective method. ********************* */public static void matrixElementSumTest() {int[][] tempMatrix = new int[3][4];for (int i = 0; i &lt; tempMatrix.length; i++) {for (int j = 0; j&lt; tempMatrix[0].length; j++) {tempMatrix[i][j] = i * 10 + j;} // of for j} // of for iSystem.out.println("The matrix is: \r\n" + Arrays.deepToString(tempMatrix));System.out.println("The matrix element sum is: " + matrixElementSum(tempMatrix) + "\r\n");}// of matrixElementSumTest/** ********************* * Add two matrices. Attention: NO error check is provided at this moment. *  * @param paraMatrix1 The first matrix. * @param paraMatrix2 The second matrix. It should have the same size as *                    the first one's. * @return The addition of these matrices. ********************* */public static int[][] matrixAddition(int[][] paraMatrix1, int[][] paraMatrix2) {int[][] resultMatrix = new int[paraMatrix1.length][paraMatrix1[0].length];for (int i = 0; i &lt; paraMatrix1.length; i++) {for (int j = 0; j &lt; paraMatrix1[0].length; j++) {resultMatrix[i][j] = paraMatrix1[i][j] + paraMatrix2[i][j];} // Of for j} // Of for ireturn resultMatrix;}// Of matrixAddition/** ********************* * Unit test for respective method. ********************* */public static void matrixAdditionTest() {int[][] tempMatrix = new int[3][4];for (int i = 0; i &lt; tempMatrix.length; i++) {for (int j = 0; j &lt; tempMatrix[0].length; j++) {tempMatrix[i][j] = i * 10 + j;} // Of for j} // Of for iSystem.out.println("The matrix is: \r\n" + Arrays.deepToString(tempMatrix));int[][] tempNewMatrix = matrixAddition(tempMatrix, tempMatrix);System.out.println("The new matrix is: \r\n" + Arrays.deepToString(tempNewMatrix));}// Of matrixAdditionTest}// Of class MatrixAddition<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="矩阵元素相乘"><a href="#矩阵元素相乘" class="headerlink" title="矩阵元素相乘"></a>矩阵元素相乘</h2><pre class="line-numbers language-none"><code class="language-none">import java.util.Arrays;/** * This is the eighth code. Names and comments should follow my style strictly. *  * @author Lenovo. */public class MatrixMultiplication {/** ********************* * The entrance of the program. *  * @param args Not used now. ********************* */public static void main(String args[]) {matrixMultiplicationTest();}// Of main/** ********************* * Matrix multiplication. The columns of the first matrix should be equal to the * rows of the second one. *  * @param paraFirstMatrix  The first matrix. * @param paraSecondMatrix The second matrix. * @return The result matrix. ********************* */public static int[][] multiplication(int[][] paraFirstMatrix, int[][] paraSecondMatrix) {int m = paraFirstMatrix.length;int n = paraFirstMatrix[0].length;int p = paraSecondMatrix[0].length;// Step 1. Dimension check.if (paraSecondMatrix.length != n) {System.out.println("The two matrices cannot be multiplied.");return null;} // Of if// Step 2. The loop.int[][] resultMatrix = new int[m][p];for (int i = 0; i &lt; m; i++) {for (int j = 0; j &lt; p; j++) {for (int k = 0; k &lt; n; k++) {resultMatrix[i][j] += paraFirstMatrix[i][k] * paraSecondMatrix[k][j];} // Of for k} // Of for j} // Of for ireturn resultMatrix;}// Of multiplication/** ********************* * Unit test for respective method. ********************* */public static void matrixMultiplicationTest() {int[][] tempFirstMatrix = new int[2][3];for (int i = 0; i &lt; tempFirstMatrix.length; i++) {for (int j = 0; j &lt; tempFirstMatrix[0].length; j++) {tempFirstMatrix[i][j] = i + j;} // Of for j} // Of for iSystem.out.println("The first matrix is: \r\n" + Arrays.deepToString(tempFirstMatrix));int[][] tempSecondMatrix = new int[3][2];for (int i = 0; i &lt; tempSecondMatrix.length; i++) {for (int j = 0; j &lt; tempSecondMatrix[0].length; j++) {tempSecondMatrix[i][j] = i * 10 + j;} // Of for j} // Of for iSystem.out.println("The second matrix is: \r\n" + Arrays.deepToString(tempSecondMatrix));int[][] tempThirdMatrix = multiplication(tempFirstMatrix, tempSecondMatrix);System.out.println("The third matrix is: \r\n" + Arrays.deepToString(tempThirdMatrix));System.out.println("Trying to multiply the first matrix with itself.\r\n");tempThirdMatrix = multiplication(tempFirstMatrix, tempFirstMatrix);System.out.println("The result matrix is: \r\n" + Arrays.deepToString(tempThirdMatrix));}// Of matrixMultiplicationTest}// Of class MatrixMultiplication<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h1><pre class="line-numbers language-none"><code class="language-none">import java.util.Arrays;import java.util.Random;public class Task1{public static void main(String args[]) {task1();}/** ******************** *method. ******************** */public static void task1() {int[][] Stuscore = new int [5][3];int Lowestscore = 50;int Highestscore = 100;Random Ran = new Random();for (int i = 0; i &lt; 5; i++) {for (int j = 0; j&lt; 3; j++) {Stuscore[i][j] = Lowestscore + Ran.nextInt(Highestscore - Lowestscore);}} // of for student scoreSystem.out.println("Students score:\n" + Arrays.deepToString(Stuscore));int[] Totalscore = new int[5];for (int i = 0; i &lt; 5; i++) {for (int j =0; j &lt; 3; j++) {if (Stuscore[i][j] &lt; 60) {Totalscore[i] = 0;break;}Totalscore[i] += Stuscore[i][j];}} // of for TotalscoreSystem.out.println("Students totalscore:\n"+ Arrays.toString(Totalscore));int Bestgrade = -1;int Worstgrade = 305;int Bestindex = -1;int Worstindex = -1;for (int i = 0; i &lt; 5; i++) {if (Totalscore[i] == 0)continue;if(Bestgrade &lt; Totalscore[i]) {Bestgrade = Totalscore[i];Bestindex = i;}if (Worstgrade &gt; Totalscore[i]) {Worstgrade = Totalscore[i];Worstindex = i;}} // of for best and worst.if (Bestindex == -1) {System.out.println("Cannot find bestgrade.");}else {System.out.println("The best student is No." + Bestindex + "with score is "+ Totalscore[Bestindex]);}if (Worstindex == -1) {System.out.println("Cannot find worstgrade.");}else {System.out.println("The worst student is No." + Worstindex + "with score is " + Totalscore[Worstindex]);}} // of void task1.} // of class Task1.运行结果：Students score:[[77, 92, 96], [97, 87, 76], [82, 68, 74], [51, 88, 79], [54, 97, 88]]Students totalscore:[265, 260, 224, 0, 0]The best student is No.0with score is 265The worst student is No.2with score is 224<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="https://wenlwei.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>机器学习</title>
    <link href="https://wenlwei.github.io/posts/498ab7d9.html"/>
    <id>https://wenlwei.github.io/posts/498ab7d9.html</id>
    <published>2021-12-16T14:51:18.000Z</published>
    <updated>2022-01-30T11:15:58.043Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><h2 id="机器学习基础"><a href="#机器学习基础" class="headerlink" title="机器学习基础"></a>机器学习基础</h2><p>什么是机器学习？</p><p>通过对信息的统计来利用信息建立模型然后使用模型预测的方法。即将大量的数据转换成有用的信息。</p><p><del>为什么要进行机器学习？</del></p><p>机器学习的<strong>主要任务</strong>：<strong>回归</strong>，<strong>分类</strong></p><p><strong>分类</strong>：将实例数据进行合适分类</p><p><strong>回归</strong>：主要用于预测数值型数据</p><p><strong>训练集</strong>：拥有已大量分类的数据，是用于训练机器学习算法的数据样本集合</p><p><strong>目标变量</strong>：是机器学习算法的预测结果，<strong>分类算法</strong>中目标变量通常是<strong>标称型</strong>，<strong>回归算法</strong>中通常是<strong>连续型</strong></p><p><strong>注意</strong>：<strong>特征或属性</strong>通常是训练样本集的列，是独立测量得到的结果，<strong>多个</strong>特征联系在一起共同组成一个训练样本</p><p><strong>训练数据</strong>：机器学习<strong>开始</strong>时作为算法输入的训练样本集</p><p><strong>测试数据</strong>：训练<strong>完成</strong>后输入的训练样本集</p><p><strong>注</strong>：测试样本时不提供目标变量，由程序决定</p><p>分类和回归都称为<strong>监督学习</strong>，这类算法必须知道要预测什么，即目标变量的分类信息</p><p><strong>无监督学习</strong>即数据没有类别信息，也不给定目标值</p><p><strong>聚类</strong>：无监督学习中，将数据集合分成类似的对象组成的多个类的过程</p><p><strong>密度估计</strong>：寻找描述数据统计值的过程</p><p>无监督学习可以减少数据特征的维度</p><table><thead><tr><th align="center">监督学习的用途</th><th align="center">无监督学习的用途</th></tr></thead><tbody><tr><td align="center">k-近邻算法</td><td align="center">K-均值</td></tr><tr><td align="center">朴素贝叶斯算法</td><td align="center">DBSCAN</td></tr><tr><td align="center">支持向量机</td><td align="center">最大期望算法</td></tr><tr><td align="center">决策树</td><td align="center">Parzem窗设计</td></tr><tr><td align="center">线性回归</td><td align="center"></td></tr><tr><td align="center">局部加权线性回归</td><td align="center"></td></tr><tr><td align="center">Ridge回归</td><td align="center"></td></tr><tr><td align="center">Lasso最小回归系数估计</td><td align="center"></td></tr></tbody></table><hr><h2 id="怎样选择算法"><a href="#怎样选择算法" class="headerlink" title="怎样选择算法"></a>怎样选择算法</h2><p>使用机器学习算法的目的，想要算法完成何种任务</p><p>需要分析或收集的数据是什么</p><p>例如监督学习</p><p><a href="https://imgtu.com/i/HCNOje"><img src="https://s4.ax1x.com/2022/01/30/HCNOje.png" alt="HCNOje.png"></a></p><h1 id="Numpy库基础"><a href="#Numpy库基础" class="headerlink" title="Numpy库基础"></a>Numpy库基础</h1><h2 id="创建随机数组"><a href="#创建随机数组" class="headerlink" title="创建随机数组"></a>创建随机数组</h2><pre class="line-numbers language-none"><code class="language-none">from numpy import *random.rand(4,4)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="创建随机矩阵"><a href="#创建随机矩阵" class="headerlink" title="创建随机矩阵"></a>创建随机矩阵</h2><pre class="line-numbers language-none"><code class="language-none">from numpy import *randMat = mat (random.rand(4,4))randMat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="逆矩阵"><a href="#逆矩阵" class="headerlink" title="逆矩阵"></a>逆矩阵</h3><pre class="line-numbers language-none"><code class="language-none">randMat.I<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="存储矩阵"><a href="#存储矩阵" class="headerlink" title="存储矩阵"></a>存储矩阵</h2><pre class="line-numbers language-none"><code class="language-none">invRandMat = randMat.I<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="矩阵相乘"><a href="#矩阵相乘" class="headerlink" title="矩阵相乘"></a>矩阵相乘</h2><pre class="line-numbers language-none"><code class="language-none">randMat*invRandMat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="单位矩阵"><a href="#单位矩阵" class="headerlink" title="单位矩阵"></a>单位矩阵</h2><pre class="line-numbers language-none"><code class="language-none">from numpy import *randMat = mat (random.rand(4,4))randMat.IinvRandMat = randMat.IrandMat*invRandMat# 得误差值myEye = randMat*invRandMatmyEye - eye(4)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="k-近邻算法"><a href="#k-近邻算法" class="headerlink" title="k-近邻算法"></a>k-近邻算法</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="机器学习" scheme="https://wenlwei.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>如何搭建hexo博客</title>
    <link href="https://wenlwei.github.io/posts/11759fea.html"/>
    <id>https://wenlwei.github.io/posts/11759fea.html</id>
    <published>2021-12-15T06:18:31.000Z</published>
    <updated>2022-01-30T03:47:04.908Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>这个可以在软件商店安装</p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>打开git Bash</p><p>分别执行</p><p>git config –global user.name “你的用户名”</p><p>git config –global user.email “你的注册邮箱”</p><p>检查是否正确</p><p>git config user.name</p><p>git config user.email</p><hr><p>执行ssh-keygen -t rsa -C “你的用户名”</p><p>三次回车后电脑会生成.ssh文件，找到id_rsa.pub将公钥复制到</p><p><a href="https://imgtu.com/i/H9yI6x"><img src="https://s4.ax1x.com/2022/01/30/H9yI6x.png" alt="H9yI6x.png"></a></p><p><a href="https://imgtu.com/i/H9y7nK"><img src="https://s4.ax1x.com/2022/01/30/H9y7nK.png" alt="H9y7nK.png"></a></p><p><a href="https://imgtu.com/i/H9yH0O"><img src="https://s4.ax1x.com/2022/01/30/H9yH0O.png" alt="H9yH0O.png"></a></p><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p><strong><a href="https://nodejs.org/">https://nodejs.org</a></strong></p><p>选择LTS，可以一直选择next</p><p>装好之后可以通过命令行</p><p><strong>node -v</strong></p><p><strong>npm -v</strong></p><p>检查是否安装完成</p><p>因为hexo博客是基于npm上，所以node.js是必要的。不过因为国内镜像比较慢所以我们就通过npm下载cnpm然后连接到淘宝镜像</p><p><strong>npm install -g cnpm –registry<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></strong></p><p><strong>cnpm -v</strong>检验</p><hr><h1 id="搭建hexo"><a href="#搭建hexo" class="headerlink" title="搭建hexo"></a>搭建hexo</h1><p>可以在cmd上执行<strong>cnpm install -g hexo-cli</strong></p><p>也可以在git Bash看自己熟悉哪一种方式</p><p><strong>hexo -v</strong></p><p>搭建好之后通过<strong>mkdir blog</strong>(文件名可以自由创建，推荐安装在C盘，D盘我错了好几次)创建一个文件夹，之后所有的操作都在这个文件夹内执行，如果在哪一步出现了问题，直接干掉blog重来就行</p><p>blog创建好之后进入blog文件</p><p>执行命令行<strong>hexo init</strong>会自动在blog文件内创立需要的文件</p><p>成功会出现Starting with…</p><p>然后执行<strong>hexo s</strong>就会在本地建立一个博客，会给你一个<strong><a href="http://localhost:4000/">http://localhost:4000</a></strong>反馈，通过他就可以进行本地访问</p><h1 id="部署到远端"><a href="#部署到远端" class="headerlink" title="部署到远端"></a>部署到远端</h1><p>这一步可以选择在<strong>阿里云</strong>、<strong>腾讯云</strong>、<strong>华为云</strong>等去购买域名，也可以部署在Github上</p><p>推荐搭建在Gihub上，因为**<del>免费</del>**</p><p>浏览器</p><p><a href="https://github.com/">https://github.com</a></p><p>创建一个账户，有就可以跳过</p><p>创建好之后点击Create Repository创建仓库</p><p><a href="https://imgtu.com/i/H9yb7D"><img src="https://s4.ax1x.com/2022/01/30/H9yb7D.png" alt="H9yb7D.png"></a></p><p><a href="https://imgtu.com/i/H9yoX6"><img src="https://s4.ax1x.com/2022/01/30/H9yoX6.png" alt="H9yoX6.png"></a></p><p><strong>注意</strong>：name一定是你的<strong>用户名.github.io</strong></p><p>Description可写可不写</p><p>然后点击Create</p><p><img src="C:\Users\Lenovo\blog\source_posts\如何搭建hexo博客\6.png" alt="markdown"></p><p>这是创建好的空仓库</p><p>然后cmd执行命令行cnpm install –save hexo-depolyer-git</p><p>执行notepad _config.yml</p><p>配置<a href="https://imgtu.com/i/H9yv9A"><img src="https://s4.ax1x.com/2022/01/30/H9yv9A.png" alt="H9yv9A.png"></a></p><p>黄色的建议复制ssh<a href="https://imgtu.com/i/H9yXhd"><img src="https://s4.ax1x.com/2022/01/30/H9yXhd.png" alt="H9yXhd.png"></a></p><p><strong>注意</strong>：每一个冒号后都有空格</p><p>前面都完成后就执行hexo d</p><p>在cmd界面会提醒你输入账号，密码，成功后就可以通过你的<strong>用户名.github.io</strong>进行访问</p><h1 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h1><p>cmd界面进入blog—&gt;source—&gt;_posts</p><p>执行hexo new “标题”</p><p>然后可以直接在cmd内blog—&gt;source—&gt;_posts文件下执行标题.md打开markdown编译器进行编写</p><p>也可以通过hexo new “标题”手动打开文件</p><p>每一次对blog文件进行更改后在cmd界面blog文件下执行</p><p>hexo clean</p><p>hexo g</p><p>hexo d</p><p>就可以部署到远端</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java类</title>
    <link href="https://wenlwei.github.io/posts/46779f67.html"/>
    <id>https://wenlwei.github.io/posts/46779f67.html</id>
    <published>2021-12-14T13:51:50.000Z</published>
    <updated>2022-01-30T11:05:12.655Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java类"><a href="#Java类" class="headerlink" title="Java类"></a>Java类</h1><h2 id="字符串类"><a href="#字符串类" class="headerlink" title="字符串类"></a>字符串类</h2><h3 id="字符串处理的类"><a href="#字符串处理的类" class="headerlink" title="字符串处理的类"></a>字符串处理的类</h3><p><strong>String，StringBuffer</strong></p><p><strong>SringTokenizer</strong></p><p><strong>StringBuilder</strong></p><p><strong>StreamTokenozer</strong></p><hr><h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><p>String类定义的字符串是不可变长的。</p><p>String类是final类，是不可改变的，所以其创建对象的值无法改变。</p><p>String类中提供更改对象内容的方法并未真正更改内容，而是创建一个新的对象并返回。</p><p>字符串常量存储在<strong>常量池</strong>中，且常量唯一</p><p>直接引用字符串常量引用的是常量池中定义的常量，若<strong>无则创建</strong>。</p><p>通过<strong>构造方法</strong>创建，在堆内存中创建变量</p><p>exp： String str =  new String(“Java”);</p><p>exp：String str1=“Java”；</p><p>​       String str2=“Java”；</p><p>str1,str2引用的是同一实体Java</p><p>str1**==<strong>str2比较的是</strong>地址**</p><p>String s1 = new String(“World”);</p><p>String s2 = new String(“World”);</p><p>String s3 = “World”;</p><p>s1、s2分别在堆内存中分别创建一个World实体。</p><p>s1==s2不成立(<strong>地址</strong>)</p><p>s2==s3不成立(<strong>地址</strong>)</p><p>s2.<strong>equals</strong>(s3)成立</p><hr><h3 id="String对象是不可变的"><a href="#String对象是不可变的" class="headerlink" title="String对象是不可变的"></a>String对象是不可变的</h3><p>s1=“Hello”；</p><p>s1=“Hello Java”</p><p>创建了一个新的对象 “Hello Java”，而原来的 “Hello” 还存在于内存中</p><hr><h3 id="String类常用方法"><a href="#String类常用方法" class="headerlink" title="String类常用方法"></a>String类常用方法</h3><table><thead><tr><th align="center">返回类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"></td><td align="center">Sting()</td><td align="center">创建一个空字符串对象</td></tr><tr><td align="center"></td><td align="center">String(char value)</td><td align="center">用字符数组value创建一个字符串对象</td></tr><tr><td align="center"></td><td align="center">String(String str)</td><td align="center">用字符串对象创建一个心的字符串对象</td></tr><tr><td align="center">char[]</td><td align="center">toCharArray()</td><td align="center">将字符串转化为字符数组</td></tr><tr><td align="center">cahr</td><td align="center">charAt(int i)</td><td align="center">返回指定索引位置的值</td></tr><tr><td align="center">int</td><td align="center">compare To(String str)</td><td align="center">按字典序比较两个字符串</td></tr><tr><td align="center">String</td><td align="center">concat(String str)</td><td align="center">将str连接到当前字符串末尾</td></tr><tr><td align="center">boolean</td><td align="center">contains(CharSequence s)</td><td align="center">此字符串包含char值序列s返回true</td></tr><tr><td align="center">boolean</td><td align="center">equals(Object obj)</td><td align="center">当前字符串与对象比较</td></tr><tr><td align="center">boolean</td><td align="center">isEmpty()</td><td align="center">判断字符串是否为空</td></tr><tr><td align="center">int</td><td align="center">index Of(String str)</td><td align="center">返回当前字符串第一次出现str的索引</td></tr><tr><td align="center">int</td><td align="center">length()</td><td align="center">返回当前字符串的长度</td></tr><tr><td align="center">boolean</td><td align="center">matches(String regex)</td><td align="center">判断当前串是否匹配正则表达式</td></tr><tr><td align="center">String</td><td align="center">replace(char&nbsp;old, char&nbsp;new)</td><td align="center">对字符串中所有字符old替换为new</td></tr><tr><td align="center">Sting[]</td><td align="center">split(String regex)</td><td align="center">按给定正则表达式的匹配拆分字符串</td></tr><tr><td align="center">boolean</td><td align="center">tartsWith(String prefix)</td><td align="center">判断当前串是否以prefix开头</td></tr><tr><td align="center">String</td><td align="center">substring(int&nbsp;begin, int&nbsp;end)</td><td align="center">返回当前字符串的一个子字符串</td></tr><tr><td align="center">String</td><td align="center">trim()</td><td align="center">删除前导空格和尾部空格</td></tr><tr><td align="center">static String</td><td align="center">valueOf(Object obj)</td><td align="center">返回 Object 参数的字符串表示形式</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">String str1 = new String("abc");String str2 = new String("abc");System.out.println(str1 == str2);System.out.println(str1.equals(str2));运行结果：false     true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">String str1 = "hello";String str2 = "java";int result = str1.compareTo(str2);System.out.println(result);运行结果：返回第一个不相等字符的ASCII之差-2 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">String str1 = "how are you!";int x = 97; //a的ASCII值int index = str1.indexOf(x);System.out.println(index);运行结果:4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">String str1 = "end line,end line";String str2 = str1.replace('e', 'a');System.out.println(str2);str2 = str1.replaceAll("end", "start");System.out.println(str3);运行结果：and lina,and linastart line,start line<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">String str1 = "I am a student";String str2 = str1.substring(5);System.out.println(str2);运行结果：a student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">String str1 = "I am a student";String str2 = str1.substring(2,8);System.out.println(str2);运行结果：am a s   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">String str1 = "hello java world";String[] str2 = str1.split(" ");for(String s : str2){     System.out.println(s);}运行结果：hellojavaworld <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h3><p>StringBuffer类定义的字符串是<strong>变长</strong>的。</p><p>StringBuffer类创建对象的值<strong>允许改变</strong>，用于字符串动态变化。</p><p>常用方法包括字符串尾部追加、插入、内容替换、字符串中删除子串、字符串倒序、返回缓冲区容量等</p><hr><h3 id="StringBuffer类常用方法"><a href="#StringBuffer类常用方法" class="headerlink" title="StringBuffer类常用方法"></a>StringBuffer类常用方法</h3><table><thead><tr><th align="center">返回类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"></td><td align="center">StringBuffer()</td><td align="center">构造一个16字符的字符串缓冲区</td></tr><tr><td align="center"></td><td align="center">StringBuffer(int a)</td><td align="center">构造一指定容量的字符串缓冲区</td></tr><tr><td align="center"></td><td align="center">StringBuffer(String str)</td><td align="center">构造一指定串str另加16字符的缓冲区</td></tr><tr><td align="center"></td><td align="center">StringBuffer(CharSequence s)</td><td align="center">构造一字符序列s另加16字符的缓冲区</td></tr><tr><td align="center">String</td><td align="center">toString()</td><td align="center">转换为String字符串</td></tr><tr><td align="center">StringBuffer</td><td align="center">append(String str)</td><td align="center">追加字符串</td></tr><tr><td align="center">StringBuffer</td><td align="center">insert(int offset, String str)</td><td align="center">指定位置插入字符串</td></tr><tr><td align="center">StringBuffer</td><td align="center">reverse()</td><td align="center">字符翻转</td></tr><tr><td align="center">StringBuffer</td><td align="center">delete(int startIndex,int endIndex)</td><td align="center">删除startIndex与endIndex（不包括）之间的字符</td></tr><tr><td align="center">StringBuffer</td><td align="center">replace(int startIndex,int endIndex,String str)</td><td align="center">用str替换startIndex与endIndex（不包括）之间的字符</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">StringBuffer buffer = new StringBuffer();System.out.println(buffer.toString());buffer.append("JDK");//末尾追加buffer.append(8.0);System.out.println(buffer.toString());buffer.insert(0, "Hello ");//指定位置插入System.out.println(buffer.toString());buffer.delete(9, 12);//删除指定位置之间System.out.println(buffer.toString());运行结果：JDK8.0Hello JDK8.0Hello JDK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">StringBuffer buffer = new StringBuffer("Hello Java!");System.out.println(buffer.toString());buffer.replace(6, 11, "Python");//替换System.out.println(buffer.toString());buffer.reverse();//翻转System.out.println(buffer.toString());运行结果：Hello Java!Hello PythonnohtyP olleH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><p>StringBuilder和StringBuffer方法类似。</p><p>StringBuffer 的方法是<strong>线程安全</strong>的（不能同步访问），而StringBuilder不是。</p><hr><h3 id="String与StringBuffer比较"><a href="#String与StringBuffer比较" class="headerlink" title="String与StringBuffer比较"></a>String与StringBuffer比较</h3><h4 id="构造方法不同"><a href="#构造方法不同" class="headerlink" title="构造方法不同"></a>构造方法不同</h4><p><strong>String创建的字符串是常量，创建后不能改变</strong>；</p><p><strong>StringBuffer创建的是缓冲区，其字符串可以改变</strong>。</p><h4 id="成员方法不同"><a href="#成员方法不同" class="headerlink" title="成员方法不同"></a>成员方法不同</h4><p>String类的成员方法以只读数据为主；</p><p>StringBuffer的成员方法则可以读写字符串。</p><hr><h3 id="StringTokenizer类"><a href="#StringTokenizer类" class="headerlink" title="StringTokenizer类"></a>StringTokenizer类</h3><p>用于字符串分割，同时支持多种分隔符。</p><p>属于java.util包</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>StringTokenizer（String s），分隔标记默认为空格</p><p>StringTokenizer（String s, String delim），delim中的字符的任意排列组合都是分隔标记</p><p>public int countTokens()；// 分割串的个数</p><p>public boolean hasMoreTokens()；// 是否还有分割串</p><p>public String nextToken()；// 得到下一分割串</p><p>exp：</p><pre class="line-numbers language-none"><code class="language-none">import java.util.StringTokenizer;public class Main {public static void main(String[] args)  {        String s = "I am Jame  ,,,  you are Jerry,and he is Tom";        StringTokenizer tokenizer= new StringTokenizer(s," ,");//空格、逗号        int number = tokenizer.countTokens();// 获取单词总数        while (tokenizer.hasMoreTokens()){// 是否还有单词        String str = tokenizer.nextToken();// 获得下一个单词        System.out.println(str);        }        System.out.println("总共单词数：" + number);    } }运行结果：IamJameyouareJerryandheisTom总共单词数：10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="数学类"><a href="#数学类" class="headerlink" title="数学类"></a>数学类</h2><p>Math（数学类）</p><p>Random（随机数类）</p><hr><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p>用于数学计算</p><p>Math类的所有属性和方法都是静态的</p><p>常用方法：取绝对值abs()、求最大值max()、求最小值min()、产生随机数random()、乘幂pow()、平方根sqrt()、对数log()、三角函数运算。</p><hr><h3 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h3><p>用于产生随机数</p><p>常用方法：支持基本类型随机数的产生。包括nextBoolean()、nextBytes()、nextDouble()、nextInt()、nextInt(int n)、nextLong()、setSeed()等。</p><p>exp：</p><pre class="line-numbers language-none"><code class="language-none">import java.util.Random;public class Main {public static void main(String[] args)  {Random r = new Random();int number = r.nextInt(10);System.out.println(number);    } }运行结果：7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h2><p>Date类在包java.util</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><table><thead><tr><th align="center">返回类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"></td><td align="center">Date()</td><td align="center">构造方法，获取系统日期</td></tr><tr><td align="center">boolean</td><td align="center">after(Date d)</td><td align="center">测试此日期是否在指定日期之后</td></tr><tr><td align="center">boolean</td><td align="center">before(Date d)</td><td align="center">测试此日期是否在指定日期之前</td></tr><tr><td align="center">int</td><td align="center">compareTo(Date d)</td><td align="center">比较两个日期的顺序</td></tr><tr><td align="center">long</td><td align="center">getTime()</td><td align="center">返回自格林尼治GMT1970年1月1日00:00:00以来此 Date 对象表示的毫秒数</td></tr></tbody></table><hr><h2 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h2><p>日历类Calendar定义在java.util包</p><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><table><thead><tr><th align="center">返回类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">get(int field)</td><td align="center">返回给定日历字段的值</td></tr><tr><td align="center">Date</td><td align="center">getTime()</td><td align="center">返回一个表示此Calemder时间值的Date对象</td></tr><tr><td align="center">long</td><td align="center">getTimeInMillis()</td><td align="center">返回以毫秒为单位的此日历的时间值</td></tr><tr><td align="center">void</td><td align="center">set(int field,int value)</td><td align="center">将给定的日历字段设置为给定值</td></tr><tr><td align="center">void</td><td align="center">setTime(Date date)</td><td align="center">使用给定的Date实例设置此Calender对象的时间</td></tr></tbody></table><hr><h2 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h2><p>格式化日期SimpleDateFormat类在包java.text</p><h3 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h3><table><thead><tr><th align="center">返回类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"></td><td align="center">SimpleDateFormat(String pattern)</td><td align="center">构造方法，设置格式化日期格式</td></tr><tr><td align="center">String</td><td align="center">format(Date date)</td><td align="center">格式化日期并返回字符串</td></tr><tr><td align="center">Date</td><td align="center">parse(String source)</td><td align="center">指定格式字符串转换为Date对象</td></tr></tbody></table><hr><p>exp：</p><pre class="line-numbers language-none"><code class="language-none">import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;public class Main {public static void main(String[] args)  {Date date = new Date();System.out.println(date.toString());SimpleDateFormat formater = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");System.out.println(formater.format(date));try {    date = formater.parse("2021-12-14 21:16:30");   System.out.println(date.toString());} catch (ParseException e) {}    } }运行结果：Tue Dec 14 21:17:47 CST 20212021-12-14 21:17:47Tue Dec 14 21:16:30 CST 2021<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;public class Main {public static void main(String[] args)  {Calendar calendar = Calendar.getInstance();Date date = new Date();System.out.println(date.toString());calendar.setTime(date);int month = calendar.get(Calendar.MONTH);System.out.println(month);//月份从0开始  calendar.set(Calendar.MONTH,4);System.out.println(calendar.getTime());    } }运行结果：Tue Dec 14 21:20:48 CST 202111Fri May 14 21:20:48 CST 2021<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="集合类"><a href="#集合类" class="headerlink" title="集合类"></a>集合类</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>空间自主调整，提高空间利用率，动态存储多个对象。</p><p>提供不同的数据结构和算法，减少编程工作量。</p><p>提高程序的处理速度和质量。</p><p><strong>注意</strong>：1.集合类支持引用类型，包括包装类。</p><p>2.集合类中存放的是对象的引用，而不是对象本身。</p><hr><p>集合类均采用<strong>泛型</strong>进行定义，分为 Collection 和 Map 两种体系</p><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>泛型允许类的成员的类型可以由外部程序来指定，也就是说可以以参数形式来指定类型，即“参数化类型”。常用泛型有泛型接口、泛型类、泛型方法。</p><h4 id="泛型类定义"><a href="#泛型类定义" class="headerlink" title="泛型类定义"></a>泛型类定义</h4><p>class 泛型类名&lt;类型参数表列&gt;{//类体}</p><pre class="line-numbers language-none"><code class="language-none">public class ArrayList&lt;E&gt; { } <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="泛型接口定义"><a href="#泛型接口定义" class="headerlink" title="泛型接口定义"></a>泛型接口定义</h4><p>interface 接口名&lt;类型参数表列&gt;{}</p><pre class="line-numbers language-none"><code class="language-none">public interface List&lt;E&gt;{ }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="泛型方法定义"><a href="#泛型方法定义" class="headerlink" title="泛型方法定义"></a>泛型方法定义</h4><p>[&lt;泛型参数&gt;] 方法类型 方法名([泛型参数]){}</p><pre class="line-numbers language-none"><code class="language-none">public boolean add(E e){ }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h3><p>List：元素<strong>有序</strong>，<strong>可重复</strong>的集合</p><p>Set：元素<strong>无序</strong>、<strong>不可重复</strong>的集合</p><p>Collection 接口是 List、Set 接口的父接口，该接口里定义的方法既可用于操作 Set 集合，也可用于操作 List 集合。</p><h4 id="Collection接口方法"><a href="#Collection接口方法" class="headerlink" title="Collection接口方法"></a>Collection接口方法</h4><table><thead><tr><th align="center">类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">void</td><td align="center">clear()</td><td align="center">删除当前集合中的所有元素</td></tr><tr><td align="center">boolean</td><td align="center">contains(Object o)</td><td align="center">查找当前集合中是否有指定元素</td></tr><tr><td align="center">boolean</td><td align="center">containsAll(Collection c)</td><td align="center">查找当前集合中是否包含指定集合中的所有元素</td></tr><tr><td align="center">boolean</td><td align="center">isEmpty()</td><td align="center">当前集合是否为空</td></tr><tr><td align="center">int</td><td align="center">size()</td><td align="center">返回当前集合的元素个数</td></tr><tr><td align="center">Iterator</td><td align="center">iterator()</td><td align="center">返回一个可遍历当前集合的迭代器</td></tr><tr><td align="center">Object[]</td><td align="center">toArray()</td><td align="center">返回一个当前集合所有元素的数组</td></tr><tr><td align="center">boolean</td><td align="center">add(E e)</td><td align="center">向集合中添加新元素</td></tr><tr><td align="center">boolean</td><td align="center">addAll(Collection c)</td><td align="center">将指定集合中的所有元素添加到当前集合中</td></tr><tr><td align="center">boolean</td><td align="center">remove(Object o)</td><td align="center">删除当前集合中包含的指定元素</td></tr><tr><td align="center">boolean</td><td align="center">removeAll(Collection c)</td><td align="center">删除当前集合中与指定集合相同的所有元素</td></tr><tr><td align="center">boolean</td><td align="center">retainAll(Collection c)</td><td align="center">保留当前集合中与指定集合相同的所有元素</td></tr></tbody></table><h3 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h3><p>具有映射关系“key-value对”的集合</p><hr><h2 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h2><h4 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h4><p>List集合接口，也称之为线性表，是一个<strong>有序列表</strong>。</p><p>集合中的元素是顺序存储，可以通过下标访问。</p><p>List集合中<strong>允许出现重复元素</strong>。</p><p>实现List集合接口的常用类：ArrayList、LinkedList、Vector和Stack</p><h4 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h4><table><thead><tr><th align="center">类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center">add(E e)</td><td align="center">把元素e加到表的尾部</td></tr><tr><td align="center">void</td><td align="center">add(int index,E e)</td><td align="center">把元素e加到表的index位置，原位置元素后移</td></tr><tr><td align="center">boolean</td><td align="center">equals(Object obj)</td><td align="center">比较对象o是否与表中的元素是同一元素</td></tr><tr><td align="center">E</td><td align="center">get(int index)</td><td align="center">得到表中index位置的元素</td></tr><tr><td align="center">int</td><td align="center">indexOf(Object o)</td><td align="center">判断元素o是否存在，若不则返回-1</td></tr><tr><td align="center">Iteratot<e></e></td><td align="center">iterator()</td><td align="center">获得表的遍历器</td></tr><tr><td align="center">E</td><td align="center">set(int index,E e)</td><td align="center">修改位置上的元素</td></tr></tbody></table><h3 id="ArrayList集合类"><a href="#ArrayList集合类" class="headerlink" title="ArrayList集合类"></a>ArrayList集合类</h3><p>使用数组方式实现List接口</p><p>检索效率很高</p><p>删除效率很低</p><p>即数据结构的顺序表</p><h4 id="主要方法-1"><a href="#主要方法-1" class="headerlink" title="主要方法"></a>主要方法</h4><table><thead><tr><th align="center">类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"></td><td align="center">ArrayList()</td><td align="center">构造一个初始容量为10的空列表</td></tr><tr><td align="center"></td><td align="center">ArrayList(Collection c)</td><td align="center">构造一个包含指定collectiong的元素列表</td></tr><tr><td align="center"></td><td align="center">ArrayList(int capacity)</td><td align="center">构造一个具有指定初始容量的空列表</td></tr><tr><td align="center">Boolean</td><td align="center">add(E e)</td><td align="center">把元素e加到表的尾部</td></tr><tr><td align="center">E</td><td align="center">get(int index)</td><td align="center">得到表中index位置的元素</td></tr><tr><td align="center">boolean</td><td align="center">indexOf(Object o)</td><td align="center">判断元素o是否存在，若不则返回-1</td></tr><tr><td align="center">Iterator<e></e></td><td align="center">iterator</td><td align="center">获得表的遍历器</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">import java.util.ArrayList;import java.util.Scanner;public class Main {public static void main(String[] args) {ArrayList&lt;Integer&gt; list =new ArrayList&lt;Integer&gt;();  list.add(1);  list.add(3);  list.add(5);  list.add(7);  for (int i=0;i&lt;list.size();i++){      System.out.print(list.get(i)+",");  }  System.out.println();  list.remove(0);  System.out.println("The second item = " + list.get(1));}}运行结果：1，3，5，7The seconditem = 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="LinkedList集合类"><a href="#LinkedList集合类" class="headerlink" title="LinkedList集合类"></a>LinkedList集合类</h3><p>使用<strong>双向</strong>链表方式实现List接口，以及队列Deque接口</p><p>删除效率很高</p><p>检索效率很低</p><p>表示线性序列表，也可以表示堆栈使用，还可以当做队列使用。</p><h4 id="主要方法-2"><a href="#主要方法-2" class="headerlink" title="主要方法"></a>主要方法</h4><table><thead><tr><th align="center">类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"></td><td align="center">LinkedList()</td><td align="center">构造一个初始容量为 10 的空列表</td></tr><tr><td align="center"></td><td align="center">LinkedList(Collection c)</td><td align="center">构造一个包含指定 collection 的元素的列表</td></tr><tr><td align="center">void</td><td align="center">aa(int index,E element)</td><td align="center">把元素e插入到列表index所指位置，并依次后移</td></tr><tr><td align="center">boolean</td><td align="center">add(E e)</td><td align="center">把元素e加到表的尾部</td></tr><tr><td align="center">boolean</td><td align="center">indexOf(Object o)</td><td align="center">判断元素o在表中是否存在。若不存在，则返回-1</td></tr><tr><td align="center">void</td><td align="center">addFirst(E e)</td><td align="center">将元素e插入到列表的头部</td></tr><tr><td align="center">E</td><td align="center">getFirst()</td><td align="center">返回列表的头部元素</td></tr><tr><td align="center">E</td><td align="center">removeFirst</td><td align="center">从列表中删除头部元素并返回该元素</td></tr><tr><td align="center">E</td><td align="center">pop()</td><td align="center">栈顶元素出栈</td></tr><tr><td align="center">void</td><td align="center">push(E e)</td><td align="center">元素e入栈</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">import java.util.ArrayList;import java.util.LinkedList;import java.util.Scanner;public class Main {public static void main(String[] args) {LinkedList&lt;String&gt; list = new LinkedList&lt;String&gt;();list.add("A");list.add("B");list.add("C");list.add("D");list.remove("C");list.addFirst("E");for(String s : list) {    System.out.println(s); }//foreach遍历}}运行结果：EABD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Vector集合类"><a href="#Vector集合类" class="headerlink" title="Vector集合类"></a>Vector集合类</h3><p>是一种<strong>动态</strong>数组，元素只能是对象</p><p>对象类型可以不同</p><p>与ArrayList、LinkedList相比，<strong>线程安全</strong></p><p>通过<strong>synchronized</strong>关键字修饰方法，实现线程安全</p><table><thead><tr><th align="center">类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"></td><td align="center">Vector()</td><td align="center">构造一个初始容量为 10 的空列表</td></tr><tr><td align="center"></td><td align="center">Vector(Collection c)</td><td align="center">构造一个包含指定 collection 的元素的列表</td></tr><tr><td align="center">boolean</td><td align="center">add(E e)</td><td align="center">把元素e加到表的尾部</td></tr><tr><td align="center">int</td><td align="center">indexOf(Object o)</td><td align="center">判断元素o在表中是否存在。若不存在，则返回-1</td></tr><tr><td align="center">synchronized void</td><td align="center">addElement(E obj)</td><td align="center">将元素e同步插入到列表的尾部</td></tr><tr><td align="center">synchronized void</td><td align="center">removeElement(Object obj)</td><td align="center">同步删除元素obj</td></tr><tr><td align="center">synchronized void</td><td align="center">insertElementAt(E obj,int index)</td><td align="center">在index位置同步插入元素obj</td></tr><tr><td align="center">synchronized void</td><td align="center">firstElement()</td><td align="center">同步返回第一个元素</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">import java.util.ArrayList;import java.util.LinkedList;import java.util.Scanner;import java.util.Vector;public class Main {public static void main(String[] args) {Vector v = new Vector();v.add("Hello");v.add("JDK");v.addElement(8.0);        for(int i = 0; i &lt; v.size();i++){    System.out.println(v.get(i));}}}运行结果：HelloJDK8.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h2><p>Set集合中元素<strong>无序，不重复</strong></p><p>方法与Collection相同</p><p>实现Set集合接口的类：HashSet、TreeSet</p><hr><h4 id="主要方法-3"><a href="#主要方法-3" class="headerlink" title="主要方法"></a>主要方法</h4><p><a href="https://imgtu.com/i/H9ywfs"><img src="https://s4.ax1x.com/2022/01/30/H9ywfs.png" alt="H9ywfs.png"></a></p><hr><h3 id="HashSet集合类"><a href="#HashSet集合类" class="headerlink" title="HashSet集合类"></a>HashSet集合类</h3><p>集合中元素<strong>无序</strong></p><p>元素<strong>不重复</strong></p><p>元素<strong>值</strong>可以为<strong>空（null）</strong></p><p>存储每个元素时会生成一个唯一的整数标识——<strong>散列码</strong>（hash code），HashSet根据散列码来决定元素所在的存储位置</p><hr><h4 id="主要方法-4"><a href="#主要方法-4" class="headerlink" title="主要方法"></a>主要方法</h4><p><a href="https://imgtu.com/i/H9yBpn"><img src="https://s4.ax1x.com/2022/01/30/H9yBpn.png" alt="H9yBpn.png"></a></p><hr><pre class="line-numbers language-none"><code class="language-none">import java.util.HashSet;import java.util.Iterator;public class Main {public static void main(String[] args) {HashSet&lt;String&gt; set = new HashSet&lt;String&gt;();set.add("one");set.add("two");set.add("tree");set.add("one");//set中存放one,two,three,且无序不重复System.out.println(set.size());Iterator&lt;String&gt; iterator = set.iterator();while(iterator.hasNext()){    System.out.println(iterator.next());}}}运行结果：3onetreetwo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="TreeSet集合类"><a href="#TreeSet集合类" class="headerlink" title="TreeSet集合类"></a>TreeSet集合类</h3><p>集合中元素<strong>有序</strong>：采用<strong>二叉搜索树</strong>的数据结构进行元素的存储，按照树形层次排列，会按其存放的数据的“大小”顺序一层一层地依次排列</p><p>元素<strong>不重复</strong></p><p>存储的元素类型必须是<strong>可排序</strong>的</p><hr><h4 id="主要方法-5"><a href="#主要方法-5" class="headerlink" title="主要方法"></a>主要方法</h4><p><a href="https://imgtu.com/i/H9yfh9"><img src="https://s4.ax1x.com/2022/01/30/H9yfh9.png" alt="H9yfh9.png"></a></p><pre class="line-numbers language-none"><code class="language-none">import java.util.Iterator;import java.util.TreeSet;public class Main {public static void main(String[] args) {TreeSet&lt;String&gt; treeSet = new TreeSet&lt;String&gt;();treeSet.add("banana");treeSet.add("peach");treeSet.add("pineapple");treeSet.add("apple");  System.out.println(treeSet.first());System.out.println(treeSet.last());Iterator&lt;String&gt; iterator = treeSet.iterator();while(iterator.hasNext()){   System.out.println(iterator.next());}}}运行结果：applepineappleapplebananapeachpineapple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h2><p>用于存放一组成对的<strong>“键值对”</strong>对象</p><p>每个元素包括两部分：<strong>键（key）</strong>、<strong>值（value）</strong></p><p><strong>键（key）不能重复</strong>，<strong>值（value）可以重复</strong></p><p>实现Set集合接口的类：HashMap、HashTree、HashTable</p><hr><h4 id="主要方法-6"><a href="#主要方法-6" class="headerlink" title="主要方法"></a>主要方法</h4><p><a href="https://imgtu.com/i/H9yWtJ"><img src="https://s4.ax1x.com/2022/01/30/H9yWtJ.png" alt="H9yWtJ.png"></a></p><p><a href="https://imgtu.com/i/H9yRk4"><img src="https://s4.ax1x.com/2022/01/30/H9yRk4.png" alt="H9yRk4.png"></a></p><hr><h3 id="HashMap集合类"><a href="#HashMap集合类" class="headerlink" title="HashMap集合类"></a>HashMap集合类</h3><p>采用散列表数据结构存储数据</p><p>key-value存储</p><p>键（key）不能重复，值（value）可以重复</p><h4 id="主要方法-7"><a href="#主要方法-7" class="headerlink" title="主要方法"></a>主要方法</h4><p><a href="https://imgtu.com/i/H9yOtH"><img src="https://s4.ax1x.com/2022/01/30/H9yOtH.png" alt="H9yOtH.png"></a></p><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><hr><h2 id="系统类"><a href="#系统类" class="headerlink" title="系统类"></a>系统类</h2><hr><h2 id="其他常用类"><a href="#其他常用类" class="headerlink" title="其他常用类"></a>其他常用类</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="java" scheme="https://wenlwei.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://wenlwei.github.io/posts/4a17b156.html"/>
    <id>https://wenlwei.github.io/posts/4a17b156.html</id>
    <published>2021-12-13T01:35:29.333Z</published>
    <updated>2022-01-29T10:46:53.396Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
